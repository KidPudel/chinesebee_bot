from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
from aiogram.types.web_app_info import WebAppInfo
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters.callback_data import CallbackData
import aiohttp
import asyncio
import logging
import sys
import random
import os

from pydantic import BaseModel, Field
from typing import Annotated, Dict

dp = Dispatcher()

api = "https://chinesebeeapi-production.up.railway.app"


class ChineseMatchLookupState(StatesGroup):
    chinese_match = State()
    suggestion_details = State()


class ChineseMatch(BaseModel):
    chinese: str
    pinyin: str
    english: str
    russian: str
    level: Annotated[int, Field(alias="hsk_level")]


class MatchChoiceCallback(CallbackData, prefix="match"):
    choice: int | None = None
    searched_word: str | None = None
    
class SavedInfoCallback(CallbackData, prefix="saved"):
    saved_id: int | None = None
    word_to_see: int | None = None
    back: bool | None = None


class SaveWordCallback(CallbackData, prefix="save"):
    word_to_save: int | None = None
    searched_word: str | None = None
    should_continue: bool | None = None
    
class ClearCallback(CallbackData, prefix="clear"):
    clear: bool

class FlashCardsCallback(CallbackData, prefix="flash_cards"):
    training: bool
    current: int
    previous_question: str | None = None
    previous_answer: str | None = None


async def find_chinese_matches(word: str, bot: Bot, chat_id: int):
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{api}/chinese-match/{word}") as response:
            chinese_match_result = await response.json()
            print(chinese_match_result)
            if chinese_match_result["success"] == True:
                matches = chinese_match_result["match"]
                keyboard_builder = InlineKeyboardBuilder()
                for match in matches:
                    keyboard_builder.button(
                        text=f"{match["chinese"]} - {match["russian"]}",
                        callback_data=MatchChoiceCallback(choice=match["id"], searched_word=word).pack(),
                    )
                keyboard_builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data=MatchChoiceCallback(choice=None, searched_word=word).pack())
                keyboard_builder.adjust(1, repeat=True)
                await bot.send_message(
                    text="–í–æ—Ç —á—Ç–æ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ üïµÔ∏è", reply_markup=keyboard_builder.as_markup(), chat_id=chat_id
                )


async def find_saved_words(bot: Bot, user_id: int, chat_id: int, message_id: int | None = None):
       async with aiohttp.ClientSession() as session:
        async with session.get(f"{api}/saved-words?user_id={user_id}") as response:
            response_body = await response.json()
            if response_body["success"] == True:
                keyboard_builder = InlineKeyboardBuilder()
                if not response_body["saved_words"]:
                    await bot.send_message(text="–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ :(\n–ò—Å–ø–æ–ª—å–∑—É–π /chinese_match, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–ª–æ–≤–∞", chat_id=chat_id)
                else:
                    for saved_word in response_body["saved_words"]:
                        keyboard_builder.button(text=f"{saved_word["chinese"]} - {saved_word["russian"]}", callback_data=SavedInfoCallback(saved_id=saved_word["saved_id"], word_to_see=saved_word["word_id"]).pack())
                    keyboard_builder.adjust(1, True)
                    # when returning back, we can edit message
                    if message_id:
                        await bot.edit_message_text(text="–¢–≤–æ–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è üåª", reply_markup=keyboard_builder.as_markup(), chat_id=chat_id, message_id=message_id)
                    else:
                        await bot.send_message(text="–¢–≤–æ–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è üåª", reply_markup=keyboard_builder.as_markup(), chat_id=chat_id)


# endpoint trigger, and below, what it would use (handler)
@dp.message(CommandStart())
async def start_handler(message: Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –ö–∞–∫ –Ω–∞—Å—á–µ—Ç —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–π –∫–∏—Ç–∞–π—Å–∫–∏–π?\n–î–ª—è –Ω–∞—á–∞–ª–∞, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–ª–æ–≤–∞ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–º–∞–Ω–¥—É /chinese_match\n–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞, –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π /saved_words"
    )

# MARK: dictation
@dp.message(Command("dictation", prefix="/"))
async def dictation_handler(message: Message):
    web_app = WebAppInfo(url=f"https://chinese-bee-dictation-production.up.railway.app/?user_id={message.from_user.id}")
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–ø–∏—Å–∏", web_app=web_app)
    await message.answer(text="–ù–∞—á–∞—Ç—å –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è –≤ –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–∏?", reply_markup=keyboard.as_markup())
    

# MARK: flash cards
@dp.callback_query(FlashCardsCallback.filter(F.training == False))
async def flash_cards_end_handler(query: CallbackQuery, callback_data: FlashCardsCallback, bot: Bot):
    await bot.edit_message_text(text="–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —É–¥–µ–ª–∏–ª –≤—Ä–µ–º—è –Ω–∞ –≤–∑—Ä–∞—â–∏–≤–∞–Ω–∏–µ —Å–≤–æ–∏—Ö —Å–ª–æ–≤!", chat_id=query.message.chat.id, message_id=query.message.message_id)

@dp.callback_query(FlashCardsCallback.filter(F.training == True))
async def flash_cards_train_handler(query: CallbackQuery, callback_data: FlashCardsCallback, bot: Bot):
    if callback_data.previous_question != None and callback_data.previous_question == callback_data.previous_answer:
        await query.answer(f"{callback_data.previous_answer} –ü—Ä–∞–≤–∏–ª—å–Ω–æ! üêù")
    elif callback_data.previous_question != None and callback_data.previous_question != callback_data.previous_answer:
        await query.answer(f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - {callback_data.previous_question}")
    
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{api}/saved-words?user_id={query.from_user.id}") as response:
            response_body = await response.json()
            if response_body["success"] == True:
                print(query.message.from_user.id)
                print(query.from_user.id)
                print(response_body)
                saved_words = response_body["saved_words"]
                print(len(saved_words))
                print(callback_data.current)
                question_word = saved_words[callback_data.current]
                random.shuffle(saved_words)
                keyboard = InlineKeyboardBuilder()
                for shuffled_word in saved_words:
                    keyboard.button(text=shuffled_word["russian"], callback_data=FlashCardsCallback(training=True if callback_data.current+1 < len(saved_words) else False, current=callback_data.current+1, previous_question=question_word["chinese"], previous_answer=shuffled_word["chinese"]))
                keyboard.adjust(1, True)
                await bot.edit_message_text(text=question_word["chinese"], reply_markup=keyboard.as_markup(), chat_id=query.message.chat.id, message_id=query.message.message_id)
                


@dp.message(Command("flash_cards", prefix="/"))
async def flash_cards_handler(message: Message):
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{api}/can-train?user_id={message.from_user.id}") as response:
            response_body = await response.json()
            if response_body["success"]:
                if response_body["can_learn"] == False:
                    await message.answer(response_body["msg"])
                else:
                    keyboard = InlineKeyboardBuilder()
                    keyboard.button(text="–ù–∞—á–∞—Ç—å", callback_data=FlashCardsCallback(training=True, current=0, previous_question=None, previous_answer=None).pack())
                    keyboard.button(text="–ù–∞–∑–∞–¥", callback_data=ClearCallback(clear=True).pack())
                    await message.answer("–•–æ—á–µ—à—å –ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –∏–µ—Ä–æ–≥–ª–∏—Ñ–æ–≤?", reply_markup=keyboard.as_markup())
            else:
                await message.answer(text=response_body)


@dp.callback_query(ClearCallback.filter(F.clear == True))
async def clear_state_handler(query: CallbackQuery, bot: Bot, state: FSMContext):
    await state.clear()
    await bot.edit_message_text(text="–ú–æ–≥—É –ª–∏ —è –ø–æ–º–æ—á—å —á–µ–º –Ω–∏–±—É–¥—å –µ—â—ë? –ü–æ—Å–º–æ—Ç—Ä–∏ –∫–æ–º–º–∞–Ω–¥—ã", chat_id=query.message.chat.id, message_id=query.message.message_id)
    


# MARK: saved words

@dp.callback_query(SavedInfoCallback.filter(F.back == True))
async def back_to_saved(query: CallbackQuery, callback_data: SavedInfoCallback, bot: Bot):
    await find_saved_words(bot=bot, user_id=query.from_user.id, chat_id=query.message.chat.id, message_id=query.message.message_id)


@dp.callback_query(SavedInfoCallback.filter((F.saved_id != None) & (F.word_to_see == None)))
async def delete_saved_handler(query: CallbackQuery, callback_data: SavedInfoCallback, bot: Bot, state: FSMContext):
    async with aiohttp.ClientSession() as session:
        async with session.delete(f"{api}/saved_word?saved_id={callback_data.saved_id}") as response:
            response_body = await response.json()
            if response_body["success"] == True:
                await state.clear()
                await bot.edit_message_text(text="–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ", chat_id=query.message.chat.id, message_id=query.message.message_id)

@dp.callback_query(SavedInfoCallback.filter((F.word_to_see != None) & (F.saved_id != None)))
async def see_saved_word_handler(query: CallbackQuery, callback_data: SavedInfoCallback, bot: Bot):
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{api}/word-details/{callback_data.word_to_see}") as response:
            response_body = await response.json()
            if response_body["success"] == True:
                keyboard_builder = InlineKeyboardBuilder()
                keyboard_builder.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=SavedInfoCallback(saved_id=callback_data.saved_id).pack())
                keyboard_builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data=SavedInfoCallback(back=True).pack())
                await bot.edit_message_text(text="\n".join([f"{key}: {value}" for key, value in response_body["details"].items()]), reply_markup=keyboard_builder.as_markup(), chat_id=query.message.chat.id, message_id=query.message.message_id)
            else:
                print(response_body)


@dp.message(Command("saved_words", prefix="/"))
async def get_saved_words_handler(message: Message, bot: Bot):
    await find_saved_words(bot=bot, user_id=message.from_user.id, chat_id=message.chat.id)


@dp.callback_query(SaveWordCallback.filter((F.word_to_save == None) & (F.searched_word != None)))
async def return_to_picking_handler(query: CallbackQuery, callback_data: SaveWordCallback, bot: Bot):
    await find_chinese_matches(word=callback_data.searched_word, bot=bot, chat_id=query.message.chat.id)


@dp.callback_query(SaveWordCallback.filter(F.should_continue==True))
async def continue_handler(query: CallbackQuery, callback_data: SaveWordCallback, bot: Bot):
    await bot.edit_message_text(text="–í–≤–µ–¥–∏ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã –∏—â–µ—à—å üîé", chat_id=query.message.chat.id, message_id=query.message.message_id)




@dp.callback_query(SaveWordCallback.filter((F.word_to_save != None) & (F.searched_word != None)))
async def save_word_handler(
    query: CallbackQuery, callback_data: SaveWordCallback, bot: Bot
):
    async with aiohttp.ClientSession() as session:
        async with session.post(
            f"{api}/new-word",
            data={"user_id": query.from_user.id, "word_id": callback_data.word_to_save},
        ) as response:
            response_body = await response.json()
            if response_body["success"] == True:
                keyboard_builder = InlineKeyboardBuilder()
                keyboard_builder.button(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data=SaveWordCallback(should_continue=True).pack())
                keyboard_builder.button(text="–ù–∞–∑–∞–¥", callback_data=SaveWordCallback(word_to_save=None, searched_word=callback_data.searched_word).pack())
                await bot.edit_message_text(
                    text="–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Å–µ—Ç –Ω–∞ –∏–∑—É—á–µ–Ω–∏–µ üå±",
                    chat_id=query.message.chat.id,
                    message_id=query.message.message_id,
                    reply_markup=keyboard_builder.as_markup()
                )

# MARK: search words

@dp.callback_query(MatchChoiceCallback.filter(F.choice == None))
async def regect_choices_handler(query: CallbackQuery, bot: Bot):
    keyboard_builder = InlineKeyboardBuilder()
    keyboard_builder.button(text="üõë –ó–∞–∫–æ–Ω—á–∏—Ç—å", callback_data=ClearCallback(clear=True).pack())
    await bot.edit_message_text(text="–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –µ–≥–æ –∫–∞–∫ –æ–±—ã—á–Ω–æ ‚å®Ô∏è\n–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –∑–∞–∫–æ–Ω—á–∏—Ç—å –∏—Å–∫–∞—Ç—å —Å–ª–æ–≤–∞, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ 'üõë –ó–∞–∫–æ–Ω—á–∏—Ç—å'", reply_markup=keyboard_builder.as_markup(), chat_id=query.message.chat.id, message_id=query.message.message_id)


@dp.callback_query(MatchChoiceCallback.filter(F.choice != None))
async def show_details_handler(
    query: CallbackQuery, callback_data: MatchChoiceCallback, bot: Bot
):
    async with aiohttp.ClientSession() as session:
        async with session.get(
            f"{api}/word-details/{callback_data.choice}"
        ) as response:
            response_body = await response.json()
            if response_body["success"] == True:
                details: Dict = response_body["details"]
                text = "\n".join([f"{key}: {value}" for key, value in details.items()])
                keyboard_builder = InlineKeyboardBuilder()
                keyboard_builder.button(
                    text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                    callback_data=SaveWordCallback(
                        word_to_save=callback_data.choice,
                        searched_word=callback_data.searched_word
                    ).pack(),
                )
                keyboard_builder.button(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data=SaveWordCallback(word_to_save=None, searched_word=callback_data.searched_word).pack(),
                )
                await bot.edit_message_text(
                    text=text,
                    chat_id=query.message.chat.id,
                    message_id=query.message.message_id,
                    reply_markup=keyboard_builder.as_markup(),
                )


# MARK: chinese match
# we can allow to through put to the endpoint the data we want, like message, to then answer, or state to set it
@dp.message(Command("chinese_match", prefix="/"))
async def chinese_match_command_handler(message: Message, state: FSMContext):
    print("test")
    await state.set_state(ChineseMatchLookupState.chinese_match)
    await message.answer("–í–≤–µ–¥–∏ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã –∏—â–µ—à—å üîé")

@dp.message(ChineseMatchLookupState.chinese_match)
async def search_match_handler(message: Message, bot: Bot):
    await find_chinese_matches(word=message.text, bot=bot, chat_id=message.chat.id)



# mark: main


async def main():
    bot = Bot(token=os.environ.get("TG_KEY"))
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main=main())
